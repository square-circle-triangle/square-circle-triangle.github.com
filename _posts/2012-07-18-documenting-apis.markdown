---
layout: post
title: Documenting APIs
---

## Background ##

Documenting an API is tricky.

There is even a [startup](http://apiary.io/ "apiary.io") trying to solve this problem.

Recently I have been looking at various ways to document our APIs, I would like to share my experience and outcome.

## What makes a good API documentation? ##

Good API documentation generally contains the following information:

- a list of endpoints, grouped by resource
- the HTTP method to use (GET, POST, etc.)
- response formats (XML, JSON, etc.)
- authentication (token, HTTP basic auth, OAuth, etc.)
- good description of parameters (possible values, required or optional, etc.)
- expected HTTP status and body for both success and failure responses
- example usages (more on this later)

Examples of good API documentation:

- [Twitter](https://dev.twitter.com/docs/api)
- [37 Signals' Basecamp](https://github.com/37signals/bcx-api)
- [Postmark](http://developer.postmarkapp.com/developer-build.html)

## Tools ##
[Swagger](http://swagger.wordnik.com/) is described as a specification and framework for describing, consuming, and visualizing RESTful web services. It was created by the [Wordnik](http://www.wordnik.com/) team to document their own API. You can check out a demo [here](http://petstore.swagger.wordnik.com/), the ability to try out GET requests is very cool.

While I think this is definitely a step in the right direction, support for Ruby/Rails resource generation is currently not quite at the same level as some of the other languages yet. By manually generating and maintaining the static JSON files, it felt like I wasn't getting the full benefits from this framework.

Another issue I ran into was authentication. While Swagger provides token-based authentication, it was much more complex to make the sandbox UI work with OAuth-based authentication APIs.

## Postman ##
[Postman](https://chrome.google.com/webstore/detail/fdmmgilgnpjigdojojpjoooidkmcomcm) is an API client implemented as a Chrome extension. It offers a very simple way to test, develop, and document APIs. The interface is nice and simple, and has support for both HTTP basic auth and OAuth 1.0.

## Result ##
In the end, my approach was to use Postman and manually test each endpoint (generated by rake routes).

For change-prone APIs, this is probably not the best approach. Something like Swagger would be a better solution to ensure documentation matches implementation. But for now, I found this solution is sufficient for our needs.

## Other points of interest ##
[Apigee Console](https://apigee.com/console)
Interact with APIs from major web services.

[API Taster](https://github.com/fredwu/api_taster)
A ruby gem by Fred Wu.
